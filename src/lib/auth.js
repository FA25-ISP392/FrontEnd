// ====================C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N API====================

//V√¨ Vite ch·∫°y localhost n√™n ph·∫£i c·∫ßn th√¥ng qua Proxy ƒë·ªÉ chuy·ªÉn t·ª´ localhost sang th√†nh ƒë∆∞·ªùng d·∫´n API
const USE_PROXY = true; //B·∫≠t/T·∫Øt Proxy
const BASE_URL = "https://isp392-production.up.railway.app/isp392/auth/token"; //N∆°i ch·ª©a ƒë∆∞·ªùng d·∫´n API m√† BE ƒë∆∞a cho

const LOGIN_PATH = USE_PROXY ? "/api/auth/token" : "/isp392/auth/token"; //N·∫øu mu·ªën d√πng cho vi·ªác ƒëƒÉng nh·∫≠p th√¨ l√†m nh∆∞ n√†y

//Chia role
export const roleRoutes = {
  ADMIN: "/admin",
  MANAGER: "/manager",
  STAFF: "/staff",
  CHEF: "/chef",
};

// ====================TI·ªÜN √çCH JWT v√† PHI√äN====================

//C·∫•u h√¨nh v√† s·ª≠ d·ª•ng JWT&PHI√äN
//Gi·∫£i m√£ ƒëo·∫°n token ƒë·ªÉ l·∫•y ra ph·∫ßn mong mu·ªën
export function parseJWT(token) {
  try {
    // T√°ch ph·∫ßn payload (·ªü gi·ªØa, index [1])
    const base64Url = token.split(".")[1];
    if (!base64Url) return null;

    // base64url -> base64 + padding
    // Chuy·ªÉn base64url -> base64 chu·∫©n + th√™m padding
    let base64 = base64Url.replace(/-/g, "+").replace(/_/g, "/");
    const pad = base64.length % 4;
    if (pad) base64 += "=".repeat(4 - pad);

    // Gi·∫£i m√£ base64 th√†nh chu·ªói JSON
    const json = atob(base64);

    // Parse JSON th√†nh object JavaScript
    return JSON.parse(json);
  } catch (e) {
    console.error("decode JWT error:", e);
    return null;
  }
}

//L·∫•y ra role trong API ƒë·ªÉ ph√¢n quy·ªÅn
export function getRoleFromToken(decode) {
  return decode?.role || null;
}

//L∆∞u token v√† user info sau khi ƒë√£ login th√†nh c√¥ng, ƒë·ªÉ khi load l·∫°i trang kh√¥ng b·ªã vƒÉng ra ngo√†i
export function saveSession({ token, user }) {
  localStorage.setItem("token", token);
  localStorage.setItem("user", JSON.stringify(user));

  // console.log("üíæ saveSession: token saved?", !!localStorage.getItem("token"));
}

//L·∫•y ra token ƒë√£ l∆∞u ·ªü tr√™n, n·∫øu n√≥ kh√¥ng c√≥ g√¨ === null th√¨ cho ra ngo√†i
export function getToken() {
  return localStorage.getItem("token");
}

//L·∫•y ra user info ƒë√£ l∆∞u trong localStorage
export function getCurrentUser() {
  const raw = localStorage.getItem("user");
  try {
    return raw ? JSON.parse(raw) : null;
  } catch {
    return null;
  }
}

//L·∫•y ra role
export function getCurrentRole() {
  const token = localStorage.getItem("token");
  if (!token) return null;
  const d = parseJWT(token);
  return d?.role || d?.roles?.[0] || d?.authorities?.[0] || null;
}

//Xo√° h·∫øt token l·∫´n user info === d√πng cho khi ·∫•n Logout
export function clearSession() {
  localStorage.removeItem("token");
  localStorage.removeItem("user");
}

//X√°c ƒë·ªãnh Role nh·∫≠n v√†o ƒë·ªÉ ph√¢n quy·ªÅn
export function resolveRouteByRole(role) {
  if (!role) return "/";
  const key = role.toString().toUpperCase();
  return roleRoutes[key] ?? "/";
}

//Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ƒëang ƒëƒÉng nh·∫≠p h·ª£p l·ªá kh√¥ng
export function isAuthenticated() {
  const token = localStorage.getItem("token");
  if (!token) return false;
  const decoded = parseJWT(token);
  if (!decoded) return false;
  if (decoded.exp && Date.now() / 1000 >= decoded.exp) return false;
  return true;
}

// ====================CALL API LOGIN====================
export async function apiLogin({ username, password }) {
  const url = USE_PROXY ? LOGIN_PATH : BASE_URL + LOGIN_PATH;

  //G·ªçi ra fetch API
  const res = await fetch(url, {
    method: "POST",
    headers: { "Content-Type": "application/json", Accept: "application/json" },
    mode: "cors",
    credentials: "omit", //D√πng token kh√¥ng d√πng cookie
    body: JSON.stringify({ username, password }),
  });

  //In ra l·ªói n·∫øu c√≥ ph√°t hi·ªán
  if (!res.ok) {
    let msg = "UserName ho·∫∑c Passowrd kh√¥ng ƒë√∫ng.";
    try {
      const error = await res.json();
      msg = error?.message || msg;
    } catch {
      msg = "ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i.";
    }
    throw new Error(msg);
  }

  //Parse d·ªØ li·ªáu t·ª´ BE
  const data = await res.json();

  //Ki·ªÉm tra xem BE c√≥ x√°c th·ª±c th√†nh c√¥ng kh√¥ng
  const ok =
    (data?.code === 1000 || data?.code === 0) &&
    data?.result?.authenticated &&
    data?.result?.token;

  if (!ok) throw new Error("X√°c th·ª±c th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");

  //Gi·∫£i m√£ token v√† l·∫•y role
  const token = data.result.token;
  const decode = parseJWT(token);
  const role = getRoleFromToken(decode);

  // console.log("üîé API DATA:", data);
  // console.log("üîé decoded:", decode);
  // console.log("üîé role:", role);

  //Tr·∫£ ra k·∫øt qu·∫£ ƒë·ªÉ x·ª≠ l√Ω
  return {
    token,
    role,
    user: {
      username,
      authenticated: true,
      decode,
    },
  };
}

// ====================LOGOUT====================
export function logout(redirectTo = "/") {
  clearSession();
  window.location.href = redirectTo;
}
