import HeroSection from "../components/Home/HeroSection";
import VisionSection from "../components/Home/VisionSection";
import MenuSection from "../components/Home/MenuSection";
import LoginForm from "../components/Home/LoginForm";
import RegisterForm from "../components/Home/RegisterForm";
import BookingForm from "../components/Home/BookingForm";
import {
  MapPin,
  Phone,
  Mail,
  X,
  Star,
} from "lucide-react";
import { Link, NavLink } from "react-router-dom";
import { useState } from "react";

export default function Home() {
  const [isBookingOpen, setIsBookingOpen] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isAboutOpen, setIsAboutOpen] = useState(false);
  const [isLoginOpen, setIsLoginOpen] = useState(false);
  const [isLoginForm, setIsLoginForm] = useState(true); // true = login, false = register
  const [isLoggedIn, setIsLoggedIn] = useState(false); // Tr·∫°ng th√°i ƒëƒÉng nh·∫≠p

  const handleBookingSubmit = (formData) => {
    console.log("Booking submitted:", formData);
    alert("ƒê·∫∑t b√†n th√†nh c√¥ng! Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n.");
    setIsBookingOpen(false);
  };

  const handleLoginSubmit = (formData) => {
    console.log("Login submitted:", formData);
    alert("ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
    setIsLoggedIn(true); // Set tr·∫°ng th√°i ƒë√£ ƒëƒÉng nh·∫≠p
    setIsLoginOpen(false);
  };

  const handleRegisterSubmit = (formData) => {
    console.log("Register submitted:", formData);
    alert("ƒêƒÉng k√Ω th√†nh c√¥ng!");
    setIsLoginOpen(false);
  };

  const switchToRegister = () => {
    console.log("Switching to register form");
    setIsLoginForm(false);
  };

  const switchToLogin = () => {
    console.log("Switching to login form");
    setIsLoginForm(true);
  };

  const handleLoginFromBooking = () => {
    setIsBookingOpen(false); // ƒê√≥ng form ƒë·∫∑t b√†n
    setIsLoginOpen(true); // M·ªü form ƒëƒÉng nh·∫≠p
    setIsLoginForm(true); // ƒê·∫£m b·∫£o hi·ªÉn th·ªã form ƒëƒÉng nh·∫≠p
  };

  // Mock menu data for preview
  const menuCategories = {
    "Best Sellers": [
      { name: "Pizza Margherita", price: "299,000ƒë", image: "üçï" },
      { name: "Pasta Carbonara", price: "189,000ƒë", image: "üçù" },
      { name: "Beef Steak", price: "599,000ƒë", image: "ü•©" },
    ],
    "Good Deals": [
      { name: "Caesar Salad", price: "149,000ƒë", image: "ü•ó" },
      { name: "Chicken Wings", price: "199,000ƒë", image: "üçó" },
      { name: "Tiramisu", price: "129,000ƒë", image: "üç∞" },
    ],
  };

  return (
    <div className="min-h-screen">
      {/* Home Header */}
      <header className="fixed top-0 left-0 right-0 w-full bg-white shadow-sm z-50">
        <div className="mx-auto max-w-7xl px-4 py-4 flex items-center justify-between">
          {/* Brand Name */}
          <Link
            to="/home"
            className="text-2xl font-bold text-orange-600"
            aria-label="Go to home"
          >
            PersonaDine
          </Link>

          {/* Navigation Links */}
          <nav className="flex items-center gap-8">
            <button
              onClick={() => setIsAboutOpen(true)}
              className="text-gray-700 hover:text-orange-600 transition-all duration-300 hover:scale-105 hover:shadow-md px-3 py-1 rounded-lg"
            >
              V·ªÅ Ch√∫ng T√¥i
            </button>
            {isLoggedIn ? (
              <button
                onClick={() => setIsLoggedIn(false)}
                className="text-gray-700 hover:text-orange-600 transition-all duration-300 hover:scale-105 hover:shadow-md px-3 py-1 rounded-lg"
              >
                ƒêƒÉng Xu·∫•t
              </button>
            ) : (
              <button
                onClick={() => setIsLoginOpen(true)}
                className="text-gray-700 hover:text-orange-600 transition-all duration-300 hover:scale-105 hover:shadow-md px-3 py-1 rounded-lg"
              >
                ƒêƒÉng Nh·∫≠p
              </button>
            )}
            <button
              onClick={() => setIsBookingOpen(true)}
              className="text-gray-700 hover:text-orange-600 transition-all duration-300 hover:scale-105 hover:shadow-md px-3 py-1 rounded-lg"
            >
              ƒê·∫∑t B√†n
            </button>
            <button
              onClick={() => setIsMenuOpen(true)}
              className="bg-orange-500 hover:bg-orange-600 text-white px-6 py-2 rounded-full transition-all duration-300 hover:scale-105 hover:shadow-lg transform"
            >
              Th·ª±c ƒê∆°n
            </button>
          </nav>
        </div>
      </header>

      {/* Original Home Content */}
      <div className="pt-20">
        <HeroSection />
        <VisionSection />
        <MenuSection />
      </div>

      {/* Location Section */}
      <section className="py-20 bg-gradient-to-br from-neutral-50 to-neutral-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center mb-16">
            <h2 className="text-4xl md:text-5xl font-bold text-neutral-900 mb-6">
              V·ªã tr√≠ c·ªßa ch√∫ng t√¥i
            </h2>
            <p className="text-xl text-neutral-600 max-w-3xl mx-auto leading-relaxed">
              Gh√© thƒÉm nh√† h√†ng c·ªßa ch√∫ng t√¥i t·∫°i v·ªã tr√≠ thu·∫≠n ti·ªán v√† kh√¥ng
              gian ƒë·∫πp m·∫Øt
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            <div>
              <h3 className="text-2xl font-bold text-neutral-900 mb-6">
                Th√¥ng tin li√™n h·ªá
              </h3>
              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <MapPin className="h-5 w-5 text-orange-500" />
                  <span className="text-neutral-700">
                    7 D1, Long Th·∫°nh M·ªπ, TP.HCM
                  </span>
                </div>
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-orange-500" />
                  <span className="text-neutral-700">+84 123-456-789</span>
                </div>
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-orange-500" />
                  <span className="text-neutral-700">
                    comqueduongbau@restaurant.com
                  </span>
                </div>
              </div>
            </div>
            {/* D√πng iframe c·ªßa GG Map */}
            <div className="rounded-2xl overflow-hidden h-64">
              <iframe
                title="Restaurant Map"
                src={
                  "https://www.google.com/maps?q=" +
                  encodeURIComponent(
                    "7 ƒê. D1, Long Th·∫°nh M·ªπ, Th·ªß ƒê·ª©c, H·ªì Ch√≠ Minh 700000, Vi·ªát Nam",
                  ) +
                  "&output=embed"
                }
                className="w-full h-full border-0"
                loading="lazy"
                referrerPolicy="no-referrer-when-downgrade"
                allowFullScreen
              />
            </div>
          </div>
        </div>
      </section>

      {/* Booking Sidebar */}
      {isBookingOpen && (
        <div className="fixed inset-0 z-50 transition-opacity duration-300">
          <div
            className="absolute inset-0 bg-black/40"
            onClick={() => setIsBookingOpen(false)}
          />
          <div className="absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl transform transition-transform duration-300">
            <div className="p-6">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">ƒê·∫∑t B√†n</h2>
                <button
                  onClick={() => setIsBookingOpen(false)}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <BookingForm 
                onSubmit={handleBookingSubmit} 
                isLoggedIn={isLoggedIn}
                onLoginClick={handleLoginFromBooking}
              />
            </div>
          </div>
        </div>
      )}

      {/* Menu Preview Sidebar */}
      {isMenuOpen && (
        <div className="fixed inset-0 z-50 transition-opacity duration-300">
          <div
            className="absolute inset-0 bg-black/40"
            onClick={() => setIsMenuOpen(false)}
          />
          <div className="absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl transform transition-transform duration-300">
            <div className="p-6 h-full overflow-y-auto">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">Th·ª±c ƒê∆°n</h2>
                <button
                  onClick={() => setIsMenuOpen(false)}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <div className="space-y-6">
                {Object.entries(menuCategories).map(([category, dishes]) => (
                  <div key={category}>
                    <h3 className="text-xl font-bold text-orange-600 mb-3 flex items-center gap-2">
                      <Star className="w-5 h-5" />
                      {category}
                    </h3>
                    <div className="space-y-3">
                      {dishes.map((dish, index) => (
                        <div
                          key={index}
                          className="bg-gray-50 rounded-lg p-3 hover:bg-gray-100 transition-colors"
                        >
                          <div className="flex items-center gap-3">
                            <div className="text-2xl">{dish.image}</div>
                            <div className="flex-1">
                              <h4 className="font-semibold text-gray-900 text-sm">
                                {dish.name}
                              </h4>
                              <p className="text-orange-600 font-bold text-sm">
                                {dish.price}
                              </p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* About Sidebar */}
      {isAboutOpen && (
        <div className="fixed inset-0 z-50 transition-opacity duration-300">
          <div
            className="absolute inset-0 bg-black/40"
            onClick={() => setIsAboutOpen(false)}
          />
          <div className="absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl transform transition-transform duration-300">
            <div className="p-6 h-full overflow-y-auto">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">
                  V·ªÅ Ch√∫ng T√¥i
                </h2>
                <button
                  onClick={() => setIsAboutOpen(false)}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <div className="space-y-4 text-gray-700 leading-relaxed text-sm">
                <p>
                  Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi nh√† h√†ng c·ªßa ch√∫ng t√¥i, n∆°i tinh hoa ·∫©m
                  th·ª±c h√≤a qu·ªán c√πng s·ª± hi·∫øu kh√°ch n·ªìng ·∫•m. Trong h∆°n m·ªôt th·∫≠p
                  k·ª∑ qua, ch√∫ng t√¥i ƒë√£ ph·ª•c v·ª• nh·ªØng m√≥n ƒÉn tuy·ªát h·∫£o ƒë∆∞·ª£c ch·∫ø
                  bi·∫øn t·ª´ nh·ªØng nguy√™n li·ªáu tinh t√∫y nh·∫•t.
                </p>

                <p>
                  Nh·ªØng ƒë·∫ßu b·∫øp t√†i hoa c·ªßa ch√∫ng t√¥i s√°ng t·∫°o n√™n th·ª±c ƒë∆°n ƒë·ªôc
                  ƒë√°o, k·∫øt h·ª£p tinh hoa k·ªπ thu·∫≠t truy·ªÅn th·ªëng v·ªõi h∆∞∆°ng v·ªã hi·ªán
                  ƒë·∫°i, mang ƒë·∫øn tr·∫£i nghi·ªám ·∫©m th·ª±c kh√≥ qu√™n trong t·ª´ng m√≥n ƒÉn.
                </p>

                <p>
                  Ch√∫ng t√¥i t·ª± h√†o mang ƒë·∫øn d·ªãch v·ª• xu·∫•t s·∫Øc trong m·ªôt kh√¥ng
                  gian tho·∫£i m√°i v√† thanh l·ªãch, l√Ω t∆∞·ªüng cho m·ªçi d·ªãp ‚Äì t·ª´ nh·ªØng
                  b·ªØa t·ªëi ·∫•m c√∫ng cho ƒë·∫øn c√°c bu·ªïi ti·ªác l·ªõn.
                </p>

                <div className="bg-orange-50 p-4 rounded-lg">
                  <h3 className="text-lg font-bold text-orange-600 mb-2">
                    S·ª© m·ªánh c·ªßa ch√∫ng t√¥i
                  </h3>
                  <p className="text-sm">
                    T·∫°o n√™n nh·ªØng tr·∫£i nghi·ªám ·∫©m th·ª±c kh√≥ qu√™n th√¥ng qua m√≥n ƒÉn
                    tuy·ªát h·∫£o, d·ªãch v·ª• xu·∫•t s·∫Øc v√† s·ª± hi·∫øu kh√°ch n·ªìng ·∫•m. ƒê·ªìng
                    th·ªùi, ch√∫ng t√¥i mang ƒë·∫øn th·ª±c ƒë∆°n ƒëa d·∫°ng v√† c√° nh√¢n h√≥a
                    theo nhu c·∫ßu t·ª´ng ng∆∞·ªùi, nh·∫±m ph·ª•c v·ª• m·ª•c ti√™u ƒÉn u·ªëng l√†nh
                    m·∫°nh ‚Äì t·ª´ tƒÉng, gi·∫£m cho ƒë·∫øn duy tr√¨ c√¢n n·∫∑ng m·ªôt c√°ch b·ªÅn
                    v·ªØng.
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Login/Register Sidebar */}
      {isLoginOpen && (
        <div className="fixed inset-0 z-50 transition-opacity duration-300">
          <div
            className="absolute inset-0 bg-black/40"
            onClick={() => setIsLoginOpen(false)}
          />
          <div className="absolute right-0 top-0 h-full w-full max-w-md bg-white shadow-xl transform transition-transform duration-300">
            <div className="p-6 h-full overflow-y-auto">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-bold text-gray-900">
                  {isLoginForm ? "ƒêƒÉng Nh·∫≠p" : "ƒêƒÉng K√Ω"}
                </h2>
                <button
                  onClick={() => setIsLoginOpen(false)}
                  className="p-2 hover:bg-gray-100 rounded-full transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
              

              {/* Form Container */}
              <div className="transition-all duration-500 ease-in-out">
                {isLoginForm ? (
                  <LoginForm 
                    onSubmit={handleLoginSubmit} 
                    onSwitchToRegister={switchToRegister} 
                  />
                ) : (
                  <RegisterForm 
                    onSubmit={handleRegisterSubmit} 
                    onSwitchToLogin={switchToLogin} 
                  />
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
